"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/services/binance-service.ts":
/*!*****************************************!*\
  !*** ./lib/services/binance-service.ts ***!
  \*****************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BinanceService: () => (/* binding */ BinanceService)\n/* harmony export */ });\n// Top cryptocurrencies to track\nconst TOP_CRYPTOS = [\n    {\n        id: \"bitcoin\",\n        symbol: \"BTC\",\n        name: \"Bitcoin\",\n        image: \"btc.png\"\n    },\n    {\n        id: \"ethereum\",\n        symbol: \"ETH\",\n        name: \"Ethereum\",\n        image: \"/crypto-icons/eth.png\"\n    },\n    {\n        id: \"tether\",\n        symbol: \"USDT\",\n        name: \"Tether\",\n        image: \"/crypto-icons/usdt.png\"\n    },\n    {\n        id: \"ripple\",\n        symbol: \"XRP\",\n        name: \"XRP\",\n        image: \"/crypto-icons/xrp.png\"\n    },\n    {\n        id: \"binancecoin\",\n        symbol: \"BNB\",\n        name: \"BNB\",\n        image: \"/crypto-icons/bnb.png\"\n    },\n    {\n        id: \"solana\",\n        symbol: \"SOL\",\n        name: \"Solana\",\n        image: \"/crypto-icons/sol.png\"\n    }\n];\nclass BinanceService {\n    // Fetch initial crypto data\n    async getCryptoData() {\n        try {\n            // Fetch current prices\n            const priceResponse = await fetch(\"https://api.binance.com/api/v3/ticker/price\");\n            const priceData = await priceResponse.json();\n            // Fetch 24h stats\n            const statsResponse = await fetch(\"https://api.binance.com/api/v3/ticker/24hr\");\n            const statsData = await statsResponse.json();\n            // Map the data to our format\n            return TOP_CRYPTOS.map((crypto)=>{\n                const symbol = \"\".concat(crypto.symbol, \"USDT\");\n                const price = priceData.find((p)=>p.symbol === symbol);\n                const stats = statsData.find((s)=>s.symbol === symbol);\n                // Generate random data for fields not available from Binance API\n                const marketCap = this.getRandomMarketCap(crypto.symbol);\n                const circulatingSupply = this.getRandomSupply(crypto.symbol);\n                const maxSupply = crypto.symbol === \"BTC\" ? 21000000 : crypto.symbol === \"ETH\" ? 0 : this.getRandomMaxSupply(crypto.symbol);\n                return {\n                    id: crypto.id,\n                    name: crypto.name,\n                    symbol: crypto.symbol,\n                    image: crypto.image,\n                    price: Number.parseFloat((price === null || price === void 0 ? void 0 : price.price) || \"0\"),\n                    priceChange1h: this.getRandomPercentage(0.5),\n                    priceChange24h: stats ? Number.parseFloat(stats.priceChangePercent) : this.getRandomPercentage(2),\n                    priceChange7d: this.getRandomPercentage(5),\n                    marketCap,\n                    volume24h: stats ? Number.parseFloat(stats.quoteVolume) : this.getRandomVolume(),\n                    volume24hInCrypto: stats ? Number.parseFloat(stats.volume) : this.getRandomVolume() / Number.parseFloat((price === null || price === void 0 ? void 0 : price.price) || \"1\"),\n                    circulatingSupply,\n                    maxSupply,\n                    sparkline7d: \"/crypto-charts/\".concat(crypto.symbol.toLowerCase(), \".svg\"),\n                    sparklineData: this.generateSparklineData(crypto.symbol, crypto.symbol === \"BTC\" || crypto.symbol === \"ETH\" || crypto.symbol === \"SOL\" ? \"up\" : crypto.symbol === \"USDT\" ? \"volatile\" : \"up\"),\n                    isFavorite: false\n                };\n            });\n        } catch (error) {\n            console.error(\"Error fetching crypto data:\", error);\n            throw error;\n        }\n    }\n    // Start WebSocket connection for real-time updates\n    startRealTimeUpdates(callback) {\n        // Create a WebSocket connection to Binance\n        const streams = this.symbols.map((symbol)=>\"\".concat(symbol, \"@ticker\")).join(\"/\");\n        this.websocket = new WebSocket(\"wss://stream.binance.com:9443/ws/\".concat(streams));\n        this.websocket.onmessage = (event)=>{\n            const data = JSON.parse(event.data);\n            // Find the corresponding crypto\n            const symbol = data.s.replace(\"USDT\", \"\");\n            const crypto = TOP_CRYPTOS.find((c)=>c.symbol === symbol);\n            if (crypto) {\n                // Update the crypto data\n                callback({\n                    id: crypto.id,\n                    price: Number.parseFloat(data.c),\n                    priceChange24h: Number.parseFloat(data.P),\n                    priceChange1h: this.getRandomPercentage(0.3),\n                    volume24h: Number.parseFloat(data.q),\n                    volume24hInCrypto: Number.parseFloat(data.v)\n                });\n            }\n        };\n        this.websocket.onerror = (error)=>{\n            console.error(\"WebSocket error:\", error);\n            // Fallback to polling if WebSocket fails\n            this.startPolling(callback);\n        };\n        // Return a function to stop the WebSocket\n        return ()=>{\n            if (this.websocket) {\n                this.websocket.close();\n                this.websocket = null;\n            }\n        };\n    }\n    // Fallback to polling if WebSocket is not available\n    startPolling(callback) {\n        const interval = setInterval(async ()=>{\n            try {\n                const priceResponse = await fetch(\"https://api.binance.com/api/v3/ticker/price\");\n                const priceData = await priceResponse.json();\n                TOP_CRYPTOS.forEach((crypto)=>{\n                    const symbol = \"\".concat(crypto.symbol, \"USDT\");\n                    const price = priceData.find((p)=>p.symbol === symbol);\n                    if (price) {\n                        callback({\n                            id: crypto.id,\n                            price: Number.parseFloat(price.price),\n                            priceChange1h: this.getRandomPercentage(0.3),\n                            priceChange24h: this.getRandomPercentage(1)\n                        });\n                    }\n                });\n            } catch (error) {\n                console.error(\"Error polling crypto data:\", error);\n            }\n        }, 2000);\n        return ()=>clearInterval(interval);\n    }\n    // Helper methods to generate random data\n    getRandomPercentage(max) {\n        return Math.random() * max * 2 - max;\n    }\n    getRandomVolume() {\n        return Math.random() * 10000000000;\n    }\n    getRandomMarketCap(symbol) {\n        switch(symbol){\n            case \"BTC\":\n                return 1800000000000 + Math.random() * 100000000000;\n            case \"ETH\":\n                return 210000000000 + Math.random() * 10000000000;\n            case \"USDT\":\n                return 140000000000 + Math.random() * 5000000000;\n            case \"XRP\":\n                return 130000000000 + Math.random() * 5000000000;\n            case \"BNB\":\n                return 85000000000 + Math.random() * 2000000000;\n            case \"SOL\":\n                return 78000000000 + Math.random() * 2000000000;\n            default:\n                return 10000000000 + Math.random() * 1000000000;\n        }\n    }\n    getRandomSupply(symbol) {\n        switch(symbol){\n            case \"BTC\":\n                return 19850000;\n            case \"ETH\":\n                return 120710000;\n            case \"USDT\":\n                return 145270000000;\n            case \"XRP\":\n                return 58390000000;\n            case \"BNB\":\n                return 140890000;\n            case \"SOL\":\n                return 517310000;\n            default:\n                return 1000000000;\n        }\n    }\n    getRandomMaxSupply(symbol) {\n        switch(symbol){\n            case \"BTC\":\n                return 21000000;\n            case \"XRP\":\n                return 100000000000;\n            case \"BNB\":\n                return 200000000;\n            case \"SOL\":\n                return 700000000;\n            default:\n                return 0;\n        }\n    }\n    generateSparklineData(symbol, trend) {\n        const length = 24;\n        const result = [];\n        let value = 100;\n        for(let i = 0; i < length; i++){\n            if (trend === \"up\") {\n                // Upward trend with small fluctuations\n                value = value * (1 + (Math.random() * 0.03 - 0.01));\n            } else if (trend === \"down\") {\n                // Downward trend with small fluctuations\n                value = value * (1 + (Math.random() * 0.02 - 0.03));\n            } else {\n                // Volatile with larger fluctuations\n                value = value * (1 + (Math.random() * 0.08 - 0.04));\n            }\n            result.push(value);\n        }\n        return result;\n    }\n    constructor(){\n        this.websocket = null;\n        this.symbols = TOP_CRYPTOS.map((crypto)=>\"\".concat(crypto.symbol.toLowerCase(), \"usdt\"));\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/services/binance-service.ts\n"));

/***/ })

});